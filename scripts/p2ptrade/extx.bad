define(["jquery"], function($)
{
	function log_event(ekind, msg) {
		console.log("Event: " + ekind + " Msg:" + msg);
	}


     function MockExchangeTransaction (wallet, data) {
         this.wallet = wallet;
         this.tx = data.tx;
         this.my = data.my;
     }
     MockExchangeTransaction.prototype.checkOutputsToMe = function (myaddress, color, value) {
         var total = 0;
         this.tx.out.forEach(function (out) {
                                 if (out.to == myaddress && out.color == color)
                                     total += out.value;
                                 });
         return (total >= value);
     };
     MockExchangeTransaction.prototype.signMyInputs = function (reftx) {
         var my = reftx ? reftx.my : this.my;
         this.tx.inp.forEach(function (inp) {
                                if (my.indexOf(inp.outpoint) >= 0)
                                    inp.signed = true;
                                 });
         return true;
     };
     MockExchangeTransaction.prototype.broadcast = function () {
         log_event("MockExchangeTransaction.broadcast");
         if (!this.hasEnoughSignatures())
             throw "trying to broadcast tx without enough signatures";
         return true;
     };
     MockExchangeTransaction.prototype.hasEnoughSignatures = function (){
         for (var i in this.tx.inp) {
             if (!this.tx.inp[i].signed)
                 return false;
         }
         return true;
     };
     MockExchangeTransaction.prototype.appendTx = function (etx) {
         // TODO: handle colors?
         this.tx.inp = this.tx.inp.concat(etx.tx.inp);
         this.tx.out = this.tx.out.concat(etx.tx.out);
         this.my = this.my.concat(etx.my);
     };
     MockExchangeTransaction.prototype.getData = function () {
         return this.tx;
     };
     
	return MockExchangeTransaction;
}
